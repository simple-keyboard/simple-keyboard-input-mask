{"version":3,"sources":["webpack://SimpleKeyboardInputMask/webpack/universalModuleDefinition","webpack://SimpleKeyboardInputMask/webpack/bootstrap","webpack://SimpleKeyboardInputMask/./src/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","SimpleKeyboardInputMask","keyboard","registerModule","inputClass","options","inputMaskTargetClass","currentButton","fn","inputMask","disableCaretPositioning","console","warn","isMaskingEnabled","inputName","mask","regex","getInputMaskStr","getInputMaskRegex","getMaskedInput","button","input","caretPos","overrides","autoAddSymbol","inputProposal","getUpdatedInput","validateInputProposal","getInput","inputPropArr","split","isCharAllowed","character","match","isBksp","inputMaskStr","trim","length","inputMaskArr","utilities","addStringAt","onKeyPressed","e","isInputTarget","target","classList","contains","debug","log","layoutKey","physicalKeyboard","getSimpleKeyboardLayoutKey","includes","replace","buttonElement","getButtonElement","isFctBtn","layoutKeyFormatted","handleButtonClicked","initInputHandling","document","addEventListener","destroy","removeEventListener","caretPosEnd","moveCaret","maxLength","setOptions","ipt","inputMaskPhysicalKeyboardHandling"],"mappings":";;;;;;;;;;;CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAiC,wBAAID,IAErCD,EAA8B,wBAAIC,IARpC,CASGK,QAAQ,WACX,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUP,QAGnC,IAAIC,EAASI,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHT,QAAS,IAUV,OANAU,EAAQH,GAAUI,KAAKV,EAAOD,QAASC,EAAQA,EAAOD,QAASM,GAG/DL,EAAOQ,GAAI,EAGJR,EAAOD,QA0Df,OArDAM,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASd,EAASe,EAAMC,GAC3CV,EAAoBW,EAAEjB,EAASe,IAClCG,OAAOC,eAAenB,EAASe,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAAStB,GACX,oBAAXuB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAenB,EAASuB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAenB,EAAS,aAAc,CAAEyB,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAShC,GAChC,IAAIe,EAASf,GAAUA,EAAO2B,WAC7B,WAAwB,OAAO3B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAK,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,G,itCClF/CC,E,sIACG,SAAAC,GACLA,EAASC,eAAe,aAAa,SAAAzC,GAAW,OAC9CA,EAAO0C,WAAaF,EAASG,QAAQC,sBAAwB,QAC7D5C,EAAO6C,cAAgB,GACvB7C,EAAO8C,GAAK,GAEPN,EAASG,QAAQI,YAOjBP,EAASG,QAAQK,0BACpBC,QAAQC,KACN,mMAEFV,EAASG,QAAQK,yBAAjB,GAGFhD,EAAOmD,iBAAmB,WACxB,IAAQJ,EAAcP,EAASG,QAAvBI,UACR,SACuB,WAArB,EAAOA,IACPA,EAAUP,EAASG,QAAQS,YAC3BL,EAAUP,EAASG,QAAQS,WAAWC,MACtCN,EAAUP,EAASG,QAAQS,WAAWE,QAI1CtD,EAAOuD,gBAAkB,WACvB,IAAA3C,EAAiC4B,EAASG,QAAlCI,EAARnC,EAAQmC,UAAWK,EAAnBxC,EAAmBwC,UACnB,OAAOpD,EAAOmD,mBAAqBJ,EAAUK,GAAWC,KAAO,IAGjErD,EAAOwD,kBAAoB,WACzB,IAAA5C,EAAiC4B,EAASG,QAAlCI,EAARnC,EAAQmC,UAAWK,EAAnBxC,EAAmBwC,UACnB,OAAOpD,EAAOmD,mBAAqBJ,EAAUK,GAAWE,MAAQ,IAMlEtD,EAAOyD,eAAiB,SAACC,EAAQC,EAAOC,GAAc,IAChDC,EAAY7D,EAAO8D,cAAcF,EAAUD,EAAOD,GAGtDC,EAAQE,EAAUF,OAASA,EAC3BC,EAAWC,EAAUD,UAAYA,EAEjC,IAAIG,EAAgB/D,EAAO8C,GAAGkB,gBAC5BN,EACAC,EACAC,EACAA,GAJkB,GAoBpB,OAZI5D,EAAOiE,sBAAsBF,EAAeH,GAC7B5D,EAAO8C,GAAGkB,gBACzBN,EACAC,EACAC,EACAA,GAJe,GAQApB,EAAS0B,YAM9BlE,EAAOiE,sBAAwB,SAACF,EAAeH,GAC7C,IAAMb,EAAY/C,EAAOuD,kBAEzB,GACEQ,GACyB,iBAAlBA,GACPhB,GACyB,iBAAlBgB,EACP,CAAC,IACGI,EAAeJ,EAAcK,MAAM,IAGvC,OAAOpE,EAAOqE,cAAcF,EAFpBP,GAAY,IAIpB,OAAM,GAIV5D,EAAOqE,cAAgB,SAAAC,GACrB,OAAOA,KAAeA,EAAUC,MAAMvE,EAAOwD,sBAG/CxD,EAAOwE,OAAS,SAAAd,GACd,MAAkB,WAAXA,GAAkC,gBAAXA,GAMhC1D,EAAO8D,cAAgB,SAACF,EAAUD,EAAOD,GACvC,IAAMe,EAAezE,EAAOuD,kBAK1BK,EAHGD,EAAMe,QAAWd,EAGTD,EAAMgB,OAFN,EAKb,IAAIC,EAAeH,EAAaL,MAAM,IATY,YAcd,IAA3BQ,EAAahB,IAEyC,OAA7DgB,EAAahB,GAAUW,MAAMvE,EAAOwD,sBAEpCG,EAAQnB,EAASqC,UAAUC,YACzBnB,EACAiB,EAAahB,GACbA,EACAA,GAJM,GAYD5D,EAAO8D,cAAcF,IAAYD,EAAOD,IAExC,CACLC,QACAC,aAMN5D,EAAO+E,aAAe,SAAAC,GACpB,IAAKhF,EAAOmD,mBAAoB,OAAM,EAEtC,IAAI8B,EAAgBD,EAAEE,OAAOC,UAAUC,SAASpF,EAAO0C,YACvD,IAAKuC,EAAe,OAAM,EAEtBzC,EAASG,QAAQ0C,OAAOpC,QAAQqC,IAAI,gBAAiBL,GACrDzC,EAASG,QAAQ0C,OAAOpC,QAAQqC,IAAI,QAASN,GAEjD,IAAIO,EAAY/C,EAASgD,iBAAiBC,2BAA2BT,GACjEO,GAAaA,EAAUG,SAAS,YAClCH,EAAYA,EAAUI,QAAQ,SAAU,KAE1C,IAAIC,EACFpD,EAASqD,iBAAiBN,IAC1B/C,EAASqD,iBAAT,WAA8BN,EAA9B,MAEF,GAAIK,EAAe,CAAC,IACdE,EAAWF,EAAcT,UAAUC,SAAS,kBAC5CW,EAAqBD,EAAQ,WAAOP,EAAP,KAAsBA,EAEvD,GACEO,IACCP,EAAUG,SAAS,UAAYH,EAAUG,SAAS,SAEnD,OAAM,EAGJlD,EAASG,QAAQ0C,OACnBpC,QAAQqC,IAAI,qBAAsBS,GAEpCvD,EAASwD,oBAAoBD,GAE7Bf,EAAEE,OAAO1D,MAAQ,GACjBwD,EAAEE,OAAO1D,MAAQgB,EAAS0B,WAGxB1B,EAASG,QAAQ0C,OAAOpC,QAAQqC,IAAIC,EAAWK,IAGrD5F,EAAOiG,kBAAoB,WACzBC,SAASC,iBAAiB,QAASnG,EAAO+E,eAG5C/E,EAAOoG,QAAU,WACfF,SAASG,oBAAoB,QAASrG,EAAO+E,eAG/C/E,EAAO8C,GAAGkB,gBAAkBxB,EAASqC,UAAUb,gBAC/CxB,EAASqC,UAAUb,gBAAkB,SACnCN,EACAC,EACAC,EACA0C,GAEI,IADJC,KACG,yDAIH,GAAIvG,EAAOmD,qBAAuBnD,EAAOwE,OAAOd,GAAS,CAIvD,MAAsClB,EAASG,QAA/C,IAAQ6D,iBAAR,MAAoB,GAApB,EAAwBpD,EAAxB,EAAwBA,UACxBZ,EAASiE,WAAW,CAClBD,UAAU,EAAD,KACJA,GADI,QAENpD,EAAYpD,EAAOuD,kBAAkBoB,WAI1C,IAAI+B,EAAM1G,EAAOyD,eAAeC,EAAQC,EAAOC,GAC/C,OAAO8C,EAEP,OAAO1G,EAAO8C,GAAGkB,gBACfN,EACAC,EACAC,EACA0C,EACAC,SAQF/D,EAASG,QAAQgE,mCACnB3G,EAAOiG,uBA/NPhD,QAAQC,KACN,wFAPyC,YA2OpCX","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboardInputMask\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboardInputMask\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","class SimpleKeyboardInputMask {\n  init = keyboard => {\n    keyboard.registerModule(\"inputMask\", module => {\n      module.inputClass = keyboard.options.inputMaskTargetClass || \"input\";\n      module.currentButton = \"\";\n      module.fn = {};\n\n      if (!keyboard.options.inputMask) {\n        console.warn(\n          \"SimpleKeyboardInputMask: You must provide the inputMask option with your input mask\"\n        );\n        return false;\n      }\n\n      if (!keyboard.options.disableCaretPositioning) {\n        console.warn(\n          \"SimpleKeyboardInputMask: Caret placement is not supported in this release. Option disableCaretPositioning will be enabled. To disable this warning, set option disableCaretPositioning to true.\"\n        );\n        keyboard.options.disableCaretPositioning = true;\n      }\n\n      module.isMaskingEnabled = () => {\n        const { inputMask } = keyboard.options;\n        return !!(\n          typeof inputMask === \"object\" &&\n          inputMask[keyboard.options.inputName] &&\n          inputMask[keyboard.options.inputName].mask &&\n          inputMask[keyboard.options.inputName].regex\n        );\n      };\n\n      module.getInputMaskStr = () => {\n        const { inputMask, inputName } = keyboard.options;\n        return module.isMaskingEnabled() ? inputMask[inputName].mask : \"\";\n      };\n\n      module.getInputMaskRegex = () => {\n        const { inputMask, inputName } = keyboard.options;\n        return module.isMaskingEnabled() ? inputMask[inputName].regex : \"\";\n      };\n\n      /**\n       * getMaskedInput\n       */\n      module.getMaskedInput = (button, input, caretPos) => {\n        let overrides = module.autoAddSymbol(caretPos, input, button);\n        let resultingInput = \"\";\n\n        input = overrides.input || input;\n        caretPos = overrides.caretPos || caretPos;\n\n        let inputProposal = module.fn.getUpdatedInput(\n          button,\n          input,\n          caretPos,\n          caretPos,\n          false\n        );\n\n        if (module.validateInputProposal(inputProposal, caretPos)) {\n          resultingInput = module.fn.getUpdatedInput(\n            button,\n            input,\n            caretPos,\n            caretPos,\n            true\n          );\n        } else {\n          resultingInput = keyboard.getInput();\n        }\n\n        return resultingInput;\n      };\n\n      module.validateInputProposal = (inputProposal, caretPos) => {\n        const inputMask = module.getInputMaskStr();\n\n        if (\n          inputProposal &&\n          typeof inputProposal === \"string\" &&\n          inputMask &&\n          typeof inputProposal === \"string\"\n        ) {\n          let inputPropArr = inputProposal.split(\"\");\n          let i = caretPos || 0;\n\n          return module.isCharAllowed(inputPropArr[i]);\n        } else {\n          return false;\n        }\n      };\n\n      module.isCharAllowed = character => {\n        return character && !!character.match(module.getInputMaskRegex());\n      };\n\n      module.isBksp = button => {\n        return button === \"{bksp}\" || button === \"{backspace}\";\n      };\n\n      /**\n       * autoAddSymbol\n       */\n      module.autoAddSymbol = (caretPos, input, button) => {\n        const inputMaskStr = module.getInputMaskStr();\n\n        if (!input.trim() && !caretPos) {\n          caretPos = 0;\n        } else {\n          caretPos = input.length;\n        }\n\n        let inputMaskArr = inputMaskStr.split(\"\");\n\n        //for (let i = caretPos; i < inputMaskArr.length; i++) {\n        if (\n          // If exists in mask\n          typeof inputMaskArr[caretPos] !== \"undefined\" &&\n          // But it is not according to regex\n          inputMaskArr[caretPos].match(module.getInputMaskRegex()) === null\n        ) {\n          input = keyboard.utilities.addStringAt(\n            input,\n            inputMaskArr[caretPos],\n            caretPos,\n            caretPos,\n            true\n          );\n\n          // if (!keyboard.options.disableCaretPositioning) {\n          //   keyboard.setCaretPosition(i);\n          // }\n\n          return module.autoAddSymbol(caretPos++, input, button);\n        } else {\n          return {\n            input,\n            caretPos\n          };\n        }\n        //}\n      };\n\n      module.onKeyPressed = e => {\n        if (!module.isMaskingEnabled()) return false;\n\n        let isInputTarget = e.target.classList.contains(module.inputClass);\n        if (!isInputTarget) return false;\n\n        if (keyboard.options.debug) console.log(\"isInputTarget\", isInputTarget);\n        if (keyboard.options.debug) console.log(\"input\", e);\n\n        let layoutKey = keyboard.physicalKeyboard.getSimpleKeyboardLayoutKey(e);\n        if (layoutKey && layoutKey.includes(\"numpad\"))\n          layoutKey = layoutKey.replace(\"numpad\", \"\");\n\n        let buttonElement =\n          keyboard.getButtonElement(layoutKey) ||\n          keyboard.getButtonElement(`{${layoutKey}}`);\n\n        if (buttonElement) {\n          let isFctBtn = buttonElement.classList.contains(\"hg-functionBtn\");\n          let layoutKeyFormatted = isFctBtn ? `{${layoutKey}}` : layoutKey;\n\n          if (\n            isFctBtn &&\n            (layoutKey.includes(\"shift\") || layoutKey.includes(\"caps\"))\n          ) {\n            return false;\n          }\n\n          if (keyboard.options.debug)\n            console.log(\"layoutKeyFormatted\", layoutKeyFormatted);\n\n          keyboard.handleButtonClicked(layoutKeyFormatted);\n\n          e.target.value = \"\";\n          e.target.value = keyboard.getInput();\n        }\n\n        if (keyboard.options.debug) console.log(layoutKey, buttonElement);\n      };\n\n      module.initInputHandling = () => {\n        document.addEventListener(\"keyup\", module.onKeyPressed);\n      };\n\n      module.destroy = () => {\n        document.removeEventListener(\"keyup\", module.onKeyPressed);\n      };\n\n      module.fn.getUpdatedInput = keyboard.utilities.getUpdatedInput;\n      keyboard.utilities.getUpdatedInput = (\n        button,\n        input,\n        caretPos,\n        caretPosEnd,\n        moveCaret = false\n      ) => {\n        /**\n         * If masking is enabled for input\n         */\n        if (module.isMaskingEnabled() && !module.isBksp(button)) {\n          /**\n           * Enforce maxLength\n           */\n          const { maxLength = {}, inputName } = keyboard.options;\n          keyboard.setOptions({\n            maxLength: {\n              ...maxLength,\n              [inputName]: module.getInputMaskStr().length\n            }\n          });\n\n          var ipt = module.getMaskedInput(button, input, caretPos);\n          return ipt;\n        } else {\n          return module.fn.getUpdatedInput(\n            button,\n            input,\n            caretPos,\n            caretPosEnd,\n            moveCaret\n          );\n        }\n      };\n\n      /**\n       * Initializing listeners\n       */\n      if (keyboard.options.inputMaskPhysicalKeyboardHandling) {\n        module.initInputHandling();\n      }\n    });\n  };\n}\n\nexport default SimpleKeyboardInputMask;\n"],"sourceRoot":""}
{"version":3,"file":"index.js","mappings":"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","sources":["webpack://SimpleKeyboardInputMask/webpack/universalModuleDefinition","webpack://SimpleKeyboardInputMask/webpack/bootstrap","webpack://SimpleKeyboardInputMask/webpack/runtime/define property getters","webpack://SimpleKeyboardInputMask/webpack/runtime/hasOwnProperty shorthand","webpack://SimpleKeyboardInputMask/webpack/runtime/make namespace object","webpack://SimpleKeyboardInputMask/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboardInputMask\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboardInputMask\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","class SimpleKeyboardInputMask {\n  init = keyboard => {\n    keyboard.registerModule(\"inputMask\", module => {\n      module.inputClass = keyboard.options.inputMaskTargetClass || \"input\";\n      module.currentButton = \"\";\n      module.fn = {};\n\n      if (!keyboard.options.inputMask) {\n        console.warn(\n          \"SimpleKeyboardInputMask: You must provide the inputMask option with your input mask\"\n        );\n        return false;\n      }\n\n      if (!keyboard.options.disableCaretPositioning) {\n        console.warn(\n          \"SimpleKeyboardInputMask: Caret placement is not supported in this release. Option disableCaretPositioning will be enabled. To disable this warning, set option disableCaretPositioning to true.\"\n        );\n        keyboard.options.disableCaretPositioning = true;\n      }\n\n      module.isMaskingEnabled = () => {\n        const { inputMask } = keyboard.options;\n        return !!(\n          typeof inputMask === \"object\" &&\n          inputMask[keyboard.options.inputName] &&\n          inputMask[keyboard.options.inputName].mask &&\n          inputMask[keyboard.options.inputName].regex\n        );\n      };\n\n      module.getInputMaskStr = () => {\n        const { inputMask, inputName } = keyboard.options;\n        return module.isMaskingEnabled() ? inputMask[inputName].mask : \"\";\n      };\n\n      module.getInputMaskRegex = () => {\n        const { inputMask, inputName } = keyboard.options;\n        return module.isMaskingEnabled() ? inputMask[inputName].regex : \"\";\n      };\n\n      /**\n       * getMaskedInput\n       */\n      module.getMaskedInput = (button, input, caretPos) => {\n        let overrides = module.autoAddSymbol(caretPos, input, button);\n        let resultingInput = \"\";\n\n        input = overrides.input || input;\n        caretPos = overrides.caretPos || caretPos;\n\n        let inputProposal = module.fn.getUpdatedInput(\n          button,\n          input,\n          caretPos,\n          caretPos,\n          false\n        );\n\n        if (module.validateInputProposal(inputProposal, caretPos)) {\n          resultingInput = module.fn.getUpdatedInput(\n            button,\n            input,\n            caretPos,\n            caretPos,\n            true\n          );\n        } else {\n          resultingInput = keyboard.getInput();\n        }\n\n        return resultingInput;\n      };\n\n      module.validateInputProposal = (inputProposal, caretPos) => {\n        const inputMask = module.getInputMaskStr();\n\n        if (\n          inputProposal &&\n          typeof inputProposal === \"string\" &&\n          inputMask &&\n          typeof inputProposal === \"string\"\n        ) {\n          let inputPropArr = inputProposal.split(\"\");\n          let i = caretPos || 0;\n\n          return module.isCharAllowed(inputPropArr[i]);\n        } else {\n          return false;\n        }\n      };\n\n      module.isCharAllowed = character => {\n        return character && !!character.match(module.getInputMaskRegex());\n      };\n\n      module.isBksp = button => {\n        return button === \"{bksp}\" || button === \"{backspace}\";\n      };\n\n      /**\n       * autoAddSymbol\n       */\n      module.autoAddSymbol = (caretPos, input, button) => {\n        const inputMaskStr = module.getInputMaskStr();\n\n        if (!input.trim() && !caretPos) {\n          caretPos = 0;\n        } else {\n          caretPos = input.length;\n        }\n\n        let inputMaskArr = inputMaskStr.split(\"\");\n\n        //for (let i = caretPos; i < inputMaskArr.length; i++) {\n        if (\n          // If exists in mask\n          typeof inputMaskArr[caretPos] !== \"undefined\" &&\n          // But it is not according to regex\n          inputMaskArr[caretPos].match(module.getInputMaskRegex()) === null\n        ) {\n          input = keyboard.utilities.addStringAt(\n            input,\n            inputMaskArr[caretPos],\n            caretPos,\n            caretPos,\n            true\n          );\n\n          // if (!keyboard.options.disableCaretPositioning) {\n          //   keyboard.setCaretPosition(i);\n          // }\n\n          return module.autoAddSymbol(caretPos++, input, button);\n        } else {\n          return {\n            input,\n            caretPos\n          };\n        }\n        //}\n      };\n\n      module.onKeyPressed = e => {\n        if (!module.isMaskingEnabled()) return false;\n\n        let isInputTarget = e.target.classList.contains(module.inputClass);\n        if (!isInputTarget) return false;\n\n        if (keyboard.options.debug) console.log(\"isInputTarget\", isInputTarget);\n        if (keyboard.options.debug) console.log(\"input\", e);\n\n        let layoutKey = keyboard.physicalKeyboard.getSimpleKeyboardLayoutKey(e);\n        if (layoutKey && layoutKey.includes(\"numpad\"))\n          layoutKey = layoutKey.replace(\"numpad\", \"\");\n\n        let buttonElement =\n          keyboard.getButtonElement(layoutKey) ||\n          keyboard.getButtonElement(`{${layoutKey}}`);\n\n        if (buttonElement) {\n          let isFctBtn = buttonElement.classList.contains(\"hg-functionBtn\");\n          let layoutKeyFormatted = isFctBtn ? `{${layoutKey}}` : layoutKey;\n\n          if (\n            isFctBtn &&\n            (layoutKey.includes(\"shift\") || layoutKey.includes(\"caps\"))\n          ) {\n            return false;\n          }\n\n          if (keyboard.options.debug)\n            console.log(\"layoutKeyFormatted\", layoutKeyFormatted);\n\n          keyboard.handleButtonClicked(layoutKeyFormatted);\n\n          e.target.value = \"\";\n          e.target.value = keyboard.getInput();\n        }\n\n        if (keyboard.options.debug) console.log(layoutKey, buttonElement);\n      };\n\n      module.initInputHandling = () => {\n        document.addEventListener(\"keyup\", module.onKeyPressed);\n      };\n\n      module.destroy = () => {\n        document.removeEventListener(\"keyup\", module.onKeyPressed);\n      };\n\n      module.fn.getUpdatedInput = keyboard.utilities.getUpdatedInput;\n      keyboard.utilities.getUpdatedInput = (\n        button,\n        input,\n        caretPos,\n        caretPosEnd,\n        moveCaret = false\n      ) => {\n        /**\n         * If masking is enabled for input\n         */\n        if (module.isMaskingEnabled() && !module.isBksp(button)) {\n          /**\n           * Enforce maxLength\n           */\n          const { maxLength = {}, inputName } = keyboard.options;\n          keyboard.setOptions({\n            maxLength: {\n              ...maxLength,\n              [inputName]: module.getInputMaskStr().length\n            }\n          });\n\n          var ipt = module.getMaskedInput(button, input, caretPos);\n          return ipt;\n        } else {\n          return module.fn.getUpdatedInput(\n            button,\n            input,\n            caretPos,\n            caretPosEnd,\n            moveCaret\n          );\n        }\n      };\n\n      /**\n       * Initializing listeners\n       */\n      if (keyboard.options.inputMaskPhysicalKeyboardHandling) {\n        module.initInputHandling();\n      }\n    });\n  };\n}\n\nexport default SimpleKeyboardInputMask;\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","keyboard","registerModule","inputClass","options","inputMaskTargetClass","currentButton","fn","inputMask","disableCaretPositioning","console","warn","isMaskingEnabled","inputName","mask","regex","getInputMaskStr","c","getInputMaskRegex","getMaskedInput","button","input","caretPos","overrides","autoAddSymbol","inputProposal","getUpdatedInput","validateInputProposal","getInput","inputPropArr","split","isCharAllowed","character","match","isBksp","inputMaskStr","trim","length","inputMaskArr","utilities","addStringAt","onKeyPressed","e","isInputTarget","target","classList","contains","debug","log","layoutKey","physicalKeyboard","getSimpleKeyboardLayoutKey","includes","replace","buttonElement","getButtonElement","isFctBtn","layoutKeyFormatted","handleButtonClicked","initInputHandling","document","addEventListener","destroy","removeEventListener","caretPosEnd","moveCaret","maxLength","setOptions","ipt","inputMaskPhysicalKeyboardHandling"],"sourceRoot":""}